# -*- coding: utf-8 -*-
"""

    subrosa.md_extensions.extended_images
    ============


        This file extends default Markdown parsers
        modyfying output generated by images
        to allow lazy loading with javascript


    :copyright: (c) 2014 by Konrad Wasowicz
    :license: MIT, see LICENSE for details.

"""


import markdown
from markdown.inlinepatterns import IMAGE_LINK_RE, IMAGE_REFERENCE_RE
from markdown.treeprocessors import Treeprocessor
from subrosa.helpers import logger


class ExtendedImagesExtension(markdown.Extension):

    """ Extends default markdown processor """

    def __init__(self, config):
        # set default path
        self.config = {
            'replacement': ['', 'Replacement for src tag']}

        for k, v in config:
            self.setConfig(k, v)

    def extendMarkdown(self, md, md_globals):
        md.registerExtension(self)
        self.processor = ExtendedImagesTreeprocessor()
        self.processor.md = md
        self.processor.config = self.getConfigs()
        if 'attr_list' in md.treeprocessors.keys():
            md.treeprocessors.add('extended_img',
                                   self.processor, '>attr_list')
        else:
            md.treeprocessors.add('extended_img',
                                  self.processor, '>prettify')


class ExtendedImagesTreeprocessor(Treeprocessor):

    """
    Replace <img src='...'> tags
    with <img data-src='...'>
    """

    def run(self, text):

        replacement = self.config['replacement']
        for elem in text.getiterator():
            if elem.tag == 'img':
                base_src = elem.get('src')
                if replacement:
                    elem.set('src', replacement)
                else:
                    elem.set('src', '#')
                    elem.set('data-src', base_src)
                    elem.set('class', 'lazy')


def makeExtension(config=None):
    return ExtendedImagesExtension(config=config)
